module SkelCpp where

-- Haskell module generated by the BNF converter

import AbsCpp
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transId :: Id -> Result
transId x = case x of
  Id string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  PDefs defs -> failure x
transDef :: Def -> Result
transDef x = case x of
  DFun type_ id args stms -> failure x
  DFunEmpty type_ id args -> failure x
  DUsing qualifiedconstant -> failure x
  DTypeDef type_ id -> failure x
  DVariable decl -> failure x
transArg :: Arg -> Result
transArg x = case x of
  AFunc type_ -> failure x
  ADecl type_ id -> failure x
  AConst type_ id -> failure x
  AConstType type_ -> failure x
  AInitConst type_ id exp -> failure x
  AInit type_ id exp -> failure x
transIDecl :: IDecl -> Result
transIDecl x = case x of
  DeclId id -> failure x
  IDeclAss id exp -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  ConstDecl type_ idecls -> failure x
  NoConstDecl type_ idecls -> failure x
transStm :: Stm -> Result
transStm x = case x of
  STypeDef type_ id -> failure x
  SExp exp -> failure x
  SDecl decl -> failure x
  SReturn exp -> failure x
  SWhile exp stm -> failure x
  SDoWhile stm exp -> failure x
  SBlock stms -> failure x
  SIfElse exp stm1 stm2 -> failure x
  SIf exp stm -> failure x
  SFor decl exp1 exp2 stm -> failure x
  SFuncConst type_ id exp -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EConst qualifiedconstant -> failure x
  EString strings -> failure x
  EInt integer -> failure x
  EDouble double -> failure x
  ETrue -> failure x
  EChar char -> failure x
  EFalse -> failure x
  EIndex exp1 exp2 -> failure x
  EApp exp exps -> failure x
  Emem exp1 exp2 -> failure x
  EPIncr exp -> failure x
  EPDecr exp -> failure x
  EPointer exp1 exp2 -> failure x
  ENot exp -> failure x
  EDRef exp -> failure x
  EIncr exp -> failure x
  EDecr exp -> failure x
  ETimes exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  EMod exp1 exp2 -> failure x
  EPlus exp1 exp2 -> failure x
  EMinus exp1 exp2 -> failure x
  ELshift exp1 exp2 -> failure x
  ERshift exp1 exp2 -> failure x
  ELt exp1 exp2 -> failure x
  EGt exp1 exp2 -> failure x
  ELtEq exp1 exp2 -> failure x
  EGtWq exp1 exp2 -> failure x
  EEq exp1 exp2 -> failure x
  ENEq exp1 exp2 -> failure x
  EAnd exp1 exp2 -> failure x
  EOr exp1 exp2 -> failure x
  EAss exp1 exp2 -> failure x
  EaDec exp1 exp2 -> failure x
  EaInc exp1 exp2 -> failure x
  EIfElse exp1 exp2 exp3 -> failure x
  EThrow exp -> failure x
transType :: Type -> Result
transType x = case x of
  Tbool -> failure x
  Tdouble -> failure x
  TFloat -> failure x
  Tint -> failure x
  Tvoid -> failure x
  TChar -> failure x
  TList qualifiedconstant -> failure x
  TRef type_ -> failure x
transTypes :: Types -> Result
transTypes x = case x of
  TypeListElem type_ -> failure x
transQualifiedConstElem :: QualifiedConstElem -> Result
transQualifiedConstElem x = case x of
  QualifiedConstElemId id -> failure x
  QualifiedConstElemInstance id typess -> failure x
transQualifiedConstant :: QualifiedConstant -> Result
transQualifiedConstant x = case x of
  QualifiedConstElems qualifiedconstelems -> failure x

